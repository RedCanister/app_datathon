import streamlit as st
import requests

API_URL = "http://localhost:8000"

st.title("üîç Sistema de Recomenda√ß√µes")
st.write("Esse app recomenda not√≠cias com base no hist√≥rico do usu√°rio!")

user_id = st.text_input("Digite seu ID de usu√°rio:")
history = st.text_input("Hist√≥rico de Leitura (IDs separados por v√≠rgula):")

if st.button("Recomendar Not√≠cias"):
    if user_id:
        try:
            history_list = history.split(",") if history else []
            payload = {
                "user_id": user_id,
                "history": [int(h) for h in history_list if h.strip().isdigit()]
            }
            response = requests.post(f"{API_URL}/predict", json=payload)
            if response.status_code == 200:
                recommendations = response.json().get("recommendations", [])
                st.success("Aqui est√£o suas recomenda√ß√µes:")
                if recommendations:
                    for rec in recommendations:
                        st.write(f"- {rec}")
                else:
                    st.info("Nenhuma recomenda√ß√£o dispon√≠vel.")
            else:
                st.error(f"Erro ao buscar recomenda√ß√µes! C√≥digo: {response.status_code}")
        except ValueError:
            st.error("Erro ao processar o hist√≥rico. Certifique-se de inserir apenas n√∫meros separados por v√≠rgula.")
    else:
        st.warning("Por favor, insira o ID do usu√°rio")

if st.button("Recomenda√ß√µes para Novos Usu√°rios"):
    response = requests.get(f"{API_URL}/cold_start")
    if response.status_code == 200:
        recommendations = response.json().get("recommendations", [])
        st.success("Recomenda√ß√µes para novos usu√°rios:")
        if recommendations:
            cols = st.columns(3)
            for index, rec in enumerate(recommendations):
                with cols[index % 3]:
                    st.markdown(f"<div style='border: 1px solid #ccc; padding: 10px; margin: 10px; text-align: center; border-radius: 10px;'>üîñ {rec}</div>", unsafe_allow_html=True)
        else:
            st.info("Nenhuma recomenda√ß√£o dispon√≠vel.")
    else:
        st.error(f"Erro ao buscar recomenda√ß√µes de cold start! C√≥digo: {response.status_code}")

